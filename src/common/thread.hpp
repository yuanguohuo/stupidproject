#ifndef STUPID__THREAD_HPP
#define STUPID__THREAD_HPP

#include <pthread.h>
#include <sys/types.h>

#include <string>

//not exist in source, but will be generated by cmake
#include "config.h"

namespace stupid {
namespace common {

#define pthread_setname_noop_helper(thread, name) ({ \
  int __i = 0;                                       \
  __i; })

#if defined(HAVE_PTHREAD_SETNAME_NP)
  #if defined(__APPLE__)
    #define pthread_setname_wrapper(thread, name) ({ \
      int __result = 0;                              \
      if (thread == pthread_self())                  \
        __result = pthread_setname_np(name);         \
      __result; })
  #else
    #define pthread_setname_wrapper pthread_setname_np
  #endif
#elif defined(HAVE_PTHREAD_SET_NAME_NP)
  #define pthread_setname_wrapper(thread, name) ({ \
    pthread_set_name_np(thread, name);             \
    0; })
#else
  #define pthread_setname_wrapper pthread_setname_noop_helper
#endif

#define pthread_getname_noop_helper(thread, name, len) ({ \
  if (name != NULL)                                       \
    *name = '\0';                                         \
  0; })

#if defined(HAVE_PTHREAD_GETNAME_NP)
  #define pthread_getname_wrapper pthread_getname_np
#elif defined(HAVE_PTHREAD_GET_NAME_NP)
  #define pthread_getname_wrapper(thread, name, len) ({ \
    pthread_get_name_np(thread, name, len);             \
    0; })
#else
  #define pthread_getname_wrapper pthread_getname_noop_helper
#endif

extern pid_t gettid_wrapper();

class Thread {
  private:
    pthread_t thread_id;
    pid_t pid;
    int cpuid;
    std::string thread_name;

    void* entry_wrapper();

  public:
    Thread(const Thread&) = delete;
    Thread& operator=(const Thread&) = delete;

    Thread();
    virtual ~Thread();

  protected:
    virtual void* entry() = 0;

  private:
    static void* _entry_func(void* arg);

  public:
    const pthread_t& get_thread_id() const;
    pid_t get_pid() const { return pid; }
    bool is_started() const;
    bool am_self() const;
    int kill(int signal);
    int try_create(size_t stacksize);
    void create(const char* name, size_t stacksize = 0);
    int join(void** prval = 0);
    int detach();
    int set_affinity(int cpuid);
};

} //namespace common
} //namespace stupid

#endif //STUPID__THREAD_HPP
